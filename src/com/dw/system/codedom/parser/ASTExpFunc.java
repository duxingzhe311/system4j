/* Generated By:JJTree: Do not edit this line. ASTFunc.java */

package com.dw.system.codedom.parser;

import java.lang.reflect.Method;

import com.dw.system.codedom.RunContext;
import com.dw.system.codedom.AbstractRunEnvironment;

/**
 * 根据表达式中的对象，方法名和参数调用对象中的方法
 * @author Jason Zhu
 */
public class ASTExpFunc extends SimpleNode
{
	String name = null;
	
	private Node runObjNode = null ;

	public ASTExpFunc(int id)
	{
		super(id);
	}

	public ASTExpFunc(UQLTreeParser p, int id)
	{
		super(p, id);
	}

	public void setName(String n)
	{
		name = n;
	}
	
	public void setRunObjNode(Node o)
	{
		runObjNode = o ;
		if(o!=null)
		{//设置该node为自己的子节点
			this.addChild(o, this.jjtGetNumChildren());
		}
	}
	
	public Node getRunObjNode()
	{
		return runObjNode ;
	}

	public String getName()
	{
		return name;
	}
	
	private Object[] runGetArguments(AbstractRunEnvironment env,RunContext context)
		throws Exception
	{
		int cc = this.jjtGetNumChildren() ;
		if(cc<=0)
			return null ;
		
		ASTArgumentList al = null ;
		for(int i = 0 ; i < cc ; i ++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTArgumentList)
			{
				al = (ASTArgumentList)n;
				break;
			}
		}
		if(al==null)
			return null ;
		
		cc = al.jjtGetNumChildren();
		Object[] rets = new Object[cc];
		for(int i = 0 ; i < cc ; i ++)
			rets[i] = al.jjtGetChild(i).runGetValue(env, context);
		return rets;
	}
	
	public Object runGetValue(AbstractRunEnvironment env,RunContext context)
		throws Exception
	{
		Object o = null ;
		//Method m = null;
		
		Object[] args = runGetArguments(env,context);
		
		if(runObjNode==null)
		{//可能是公共的方法
			o= context.getDefaultContextObj();
			if(o!=null)
			{
				try
				{
					return env.callObjectMethod(o, name, args);
				}
				catch(Exception ee)
				{}
			}
			return env.callGlobalMethod(name, args);
		}
		else
		{
			o = runObjNode.runGetValue(env, context);
			if(o==null)
				throw new Exception("cannot get object which run method="+name);
			
			return env.callObjectMethod(o, name, args);
		}
	}
	
	@Override
	public String toString()
	{
		return super.toString()+":" + name;
	}
}
