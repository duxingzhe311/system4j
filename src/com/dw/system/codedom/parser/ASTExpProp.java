/* Generated By:JJTree: Do not edit this line. ASTExpProp.java */

package com.dw.system.codedom.parser;

import java.lang.reflect.Method;

import com.dw.system.IExpPropProvider;
import com.dw.system.codedom.RunContext;
import com.dw.system.codedom.AbstractRunEnvironment;
import com.dw.system.codedom.ValWrapper;
import com.dw.system.xmldata.IXmlDataable;
import com.dw.system.xmldata.XmlData;

public class ASTExpProp extends SimpleNode
{
	private String name = null;

	private Node runObjNode = null;
	
	/**
	 * xxx.yyy.kkk 形如的名称.
	 */
	transient private String[] propFullNames = null ;

	public ASTExpProp(int id)
	{
		super(id);
	}

	public ASTExpProp(UQLTreeParser p, int id)
	{
		super(p, id);
	}

	public void setName(String n)
	{
		name = n;
	}

	public String getName()
	{
		return name;
	}
	
	/**
	 * 获得属性全名称数组.
	 * @return
	 */
	public String[] getFullNames()
	{
		if(propFullNames!=null)
			return propFullNames;
		
		int cc = this.jjtGetNumChildren();
		Node[] subns = this.children ;
		
		if(cc>0 && this.jjtGetChild(0) instanceof ASTExpProp)
		{
			ASTExpProp subep = (ASTExpProp)this.jjtGetChild(0);
			String[] fns = subep.getFullNames();
			propFullNames = new String[fns.length+1];
			propFullNames[fns.length] = name ;
			System.arraycopy(fns, 0, propFullNames, 0, fns.length);
			return propFullNames;
		}
		
		propFullNames = new String[]{name};
		return propFullNames;
	}
	
	public String getFullNameStr()
	{
		String[] fns = getFullNames();
		StringBuffer sb = new StringBuffer(fns[0]);
		for(int i = 1 ; i < fns.length ; i ++)
			sb.append(".").append(fns[i]);
		return sb.toString();
	}

	public void setRunObjNode(Node o)
	{
		runObjNode = o;
		if (o != null)
		{// 设置该node为自己的子节点
			this.addChild(o, this.jjtGetNumChildren());
		}
	}

	public Node getRunObjNode()
	{
		return runObjNode;
	}
	
	/**
	 * 可以对属性进行值的设置--该方法在赋值的时候使用
	 * @param env
	 * @param context
	 */
	public void runSetValue(AbstractRunEnvironment env,
			RunContext context,Object val) throws Exception
	{
		Object o = null;
		
		if (runObjNode == null)
		{// 可能是公共的方法
			o= context.getDefaultContextObj();
//			if(o!=null)
//			{
//				try
//				{
//					return env.callObjectProp(o, name);
//				}
//				catch(Exception ee)
//				{}
//			}
//			
//			return env.callGlobalProp(name);
		}
		else
		{
			o = runObjNode.runGetValue(env, context);
			if (o == null)
				throw new Exception("cannot get object which run method="
						+ name);
		}
		
		if(o==null)
		{
			if(context instanceof IExpPropProvider)
			{
				((IExpPropProvider)context).setPropValue(name,val);
			}
			else if(context instanceof IXmlDataable)
			{//对应实现IXmlDataable的对象,可以直接获取其成员作为属性
				//return ((IXmlDataable)context).toXmlData().getPropValue(name);
			}
			else
			{
				//return env.callGlobalProp(name);
			}
		}
		
		if(o instanceof IExpPropProvider)
		{
			((IExpPropProvider)o).setPropValue(name,val);
		}
		else if(o instanceof XmlData)
		{//support xmldata
			((XmlData)o).setParamValue(name, val) ;
		}
	}
	
	public Object runGetValue(AbstractRunEnvironment env,
			RunContext context) throws Exception
	{
		Object o = null;
		
		if (runObjNode == null)
		{// 可能是公共的方法
			o= context.getDefaultContextObj();
//			if(o!=null)
//			{
//				try
//				{
//					return env.callObjectProp(o, name);
//				}
//				catch(Exception ee)
//				{}
//			}
//			
//			return env.callGlobalProp(name);
		}
		else
		{
			o = runObjNode.runGetValue(env, context);
			//if (o == null)
			//	throw new Exception("cannot get object which run method="
			//			+ name);
			//return o ;
		}
		
		if(o==null)
		{
			if(context instanceof IExpPropProvider)
			{
				return ((IExpPropProvider)context).getPropValue(name);
			}
			else if(context instanceof IXmlDataable)
			{//对应实现IXmlDataable的对象,可以直接获取其成员作为属性
				return ((IXmlDataable)context).toXmlData().getPropValue(name);
			}
			else
			{
				ValWrapper vw = context.getValueWrapper(name) ;
				if(vw!=null)
					return vw.val ;
				return env.callGlobalProp(name);
			}
		}
		
		if(o instanceof IExpPropProvider)
		{
			return ((IExpPropProvider)o).getPropValue(name);
		}
		else if(o instanceof XmlData)
		{
			return ((XmlData)o).getParamValue(name) ;
		}
		else
		{
			ValWrapper vw = context.getValueWrapper(name) ;
			if(vw!=null)
				return vw.val ;
			
			return env.callObjectProp(o, name);
		}
	}

	
	@Override
	public String toString()
	{
		return super.toString() + ":" + name+" fullname="+getFullNameStr();
	}
}
