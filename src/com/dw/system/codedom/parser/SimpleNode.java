/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package com.dw.system.codedom.parser;

import com.dw.system.codedom.RunContext;
import com.dw.system.codedom.AbstractRunEnvironment;

public class SimpleNode implements Node
{
	protected Node parent;

	protected Node[] children;

	protected int id;

	protected UQLTreeParser parser;

	public SimpleNode(int i)
	{
		id = i;
	}

	public SimpleNode(UQLTreeParser p, int i)
	{
		this(i);
		parser = p;
	}

	public void jjtOpen()
	{
	}

	public void jjtClose()
	{
	}

	public void jjtSetParent(Node n)
	{
		parent = n;
	}

	public Node jjtGetParent()
	{
		return parent;
	}

	public void jjtAddChild(Node n, int i)
	{
		if (children == null)
		{
			children = new Node[i + 1];
		}
		else if (i >= children.length)
		{
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public void addChild(Node n,int i)
	{
		jjtAddChild(n, i);
		SimpleNode sn = (SimpleNode)n;
		sn.parent = this ;
	}
	
	public int getChildIdx(Node n)
	{
		if(children==null||children.length<=0)
			return -1;
		
		for(int i = 0 ; i < children.length ; i ++)
		{
			if(children[i]==n)
				return i;
		}
		
		return -1 ;
	}
	
	/**
	 * 得到前置兄弟节点
	 * @return
	 */
	public Node getPrevNode()
	{
		if(parent==null)
			return null ;
		
		int p = parent.getChildIdx(this);
		if(p<=0)
			return null ;
		
		return parent.jjtGetChild(p-1);
	}
	
	public Node getNextNode()
	{
		if(parent==null)
			return null ;
		
		int pcc = parent.jjtGetNumChildren();
		if(pcc<=1)
			return null;
		
		int p = parent.getChildIdx(this);
		if(p>=pcc-1)
			return null ;
		
		return parent.jjtGetChild(p+1);
	}
	
	public Node jjtGetChild(int i)
	{
		return children[i];
	}

	public int jjtGetNumChildren()
	{
		return (children == null) ? 0 : children.length;
	}

	public int getLevel()
	{
		if(parent==null)
			return 0 ;
		
		return parent.getLevel() + 1;
	}
	/**
	 * 如果本节点的子节点只有一个,并且自己有父节点，则可以调用本方法用自己的子节点
	 * 来替代自己，而自己脱离DomTree
	 */
	protected void replaceMeWithSingleChild()
	{
		int cc = jjtGetNumChildren();
		if(cc!=1)
			throw new RuntimeException("sub child node is not single!");
		
		if(this.parent==null)
			throw new RuntimeException("no parent for this node");
		
		SimpleNode scn = (SimpleNode)this.jjtGetChild(0);
		
		SimpleNode psn = (SimpleNode)parent;
		for(int i = 0 ; i < psn.children.length ; i ++)
		{
			if(psn.children[i]==this)
			{
				psn.children[i] = scn ;
				scn.jjtSetParent(psn);
				break;
			}
		}
	}
	
	protected void replaceMeWithNewNode(SimpleNode newnode)
	{
		if(this.parent==null)
			throw new RuntimeException("no parent for this node");
		
		SimpleNode psn = (SimpleNode)parent;
		for(int i = 0 ; i < psn.children.length ; i ++)
		{
			if(psn.children[i]==this)
			{
				psn.children[i] = newnode ;
				newnode.jjtSetParent(psn);
				break;
			}
		}
	}
	/**
	 * 把指定位置开始的子节点和后续子节点替换为一个外界建好的新节点
	 * @param childpos
	 * @param newnode
	 */
	protected void replaceChildrenWithNewNode(int startpos,int num,SimpleNode newnode)
	{
		if(startpos<0||startpos>=children.length)
			throw new RuntimeException("out of bound for start pos!");
		
		if(num<=0||startpos+num>children.length)
			throw new RuntimeException("invalid children num!");
		
		children[startpos] = newnode ;
		newnode.parent = this ;
		
		Node c[] = new Node[children.length-(num-1)];
		System.arraycopy(children, 0, c, 0, startpos+1);
		System.arraycopy(children, startpos+num, c, startpos+1, c.length-startpos-1);
		children = c;
	}
	
	
	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString()
	{
		return "["+getLevel()+"]"+UQLTreeParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix)
	{
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */
	
	public void dump()
	{
		dump("","");
	}

	public void dump(String prefix,String indent)
	{
		System.out.print(prefix);
		int lvl = getLevel() ;
		for(int i = 0 ; i < lvl ; i ++)
			System.out.print("|--");
		
		if(this.jjtGetNumChildren()>0)
			System.out.print("+");
		else
			System.out.print("-");
		
		System.out.print(toString());
		
		
		System.out.println();
		if (children != null)
		{
			for (int i = 0; i < children.length; ++i)
			{
				SimpleNode n = (SimpleNode) children[i];
				if (n != null)
				{
					n.dump(prefix ,indent);
				}
			}
		}
	}
	
	public void dump(String prefix)
	{
		dump(prefix,"  ");
	}
	
	
	/******************my add**********************/
	/**
	 * 通过
	 */
	public void compileNode(AbstractRunEnvironment env)
	{}
	
	public Object runGetValue(AbstractRunEnvironment env,RunContext context)
		throws Exception
	{
		return null ;
	}
}
