/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. UQL.jj */
/*@egen*/options {               
  STATIC=false;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(UQLTreeParser)

package com.dw.system.codedom.parser;

import java.io.StringReader;
import java.io.*;
import java.util.*;

public class UQLTreeParser/*@bgen(jjtree)*/implements UQLTreeParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTUQLTreeParserState jjtree = new JJTUQLTreeParserState();

/*@egen*/
    
  
  public static ASTExp parseExpToTree(String exp_str)
  	throws Exception
  {
  	StringReader sr = new StringReader(exp_str);
  	return parseExpToTree(sr);
  }
  
  public static ASTExp parseExpToTree(StringReader sr)
  	throws Exception
  {
  	
  	UQLTreeParser utp = new UQLTreeParser(sr) ;
  	return utp.Expression();
  }
  
  public static ASTExp parseExpToTree(InputStream inps)
  	throws Exception
  {
  	
  	UQLTreeParser utp = new UQLTreeParser(inps) ;
  	return utp.Expression();
  }
  
  public static ASTCodeBlock parseCodeBlockToTree(String exp_str)
  	throws Exception
  {
  	StringReader sr = new StringReader(exp_str);
  	return parseCodeBlockToTree(sr);
  }
  
  public static ASTCodeBlock parseCodeBlockToTree(StringReader sr)
  	throws Exception
  {
  	
  	UQLTreeParser utp = new UQLTreeParser(sr) ;
  	return utp.Block();
  }
  
  
  public static ASTCodeBlock parseCodeBlockToTree(InputStream inps)
  	throws Exception
  {
  	UQLTreeParser utp = new UQLTreeParser(inps) ;
  	return utp.Block();
  }
}

PARSER_END(UQLTreeParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: /*RESERVED TOKENS FOR UQL */
{
   <AND: "and">
   |  <OR:  "or">
   |  <USER: "user">
   |  <ROLE: "role">
   |  <ORG_UNIT: "orgunit">
   |  <LPAREN: "(">
   |  <RPAREN: ")">
   |  <TRUE:"true">
   |  <FALSE:"false">
   |  <VAR: "var">
   |  <IF: "if">
   |  <ELSE: "else">
   |< DOT: "." >
   
   |<NULL: "null">
   |  <ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L","s","S"])?
      | <HEX_LITERAL> (["l","L","s","S"])?
      | <OCTAL_LITERAL> (["l","L","s","S"])?
      | <BIN_LITERAL> (["l","L","s","S"])?
  > /*\u4ee5\u4e0a\u7684s\u540e\u7f00\u662fjava\u6ca1\u6709\u7684\uff0c\u4ee3\u8868short*/
|
  < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|/*java \u4e2d\u6ca1\u6709*/
  < #OCTAL_LITERAL: "0" ["o","O"] (["0"-"7"])+ >
|/*java \u4e2d\u6ca1\u6709*/
	< #BIN_LITERAL: "0" ["b","B"] (["0"-"1"])+ >
|
	
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/*IDENTIFIERS*/
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Name */
  try {
/*@egen*/
  <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NameList() :
{/*@bgen(jjtree) NameList */
  ASTNameList jjtn000 = new ASTNameList(JJTNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NameList */
  try {
/*@egen*/
  Name()
  ( "," Name()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/************************ dom\u8282\u70b9\u5b9a\u5236***********/

ASTCodeBlock Block()           :
{/*@bgen(jjtree) CodeBlock */
  ASTCodeBlock jjtn000 = new ASTCodeBlock(JJTCODEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CodeBlock */
  try {
/*@egen*/
  "{" ( BlockStatement() )* "}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BlockStatement()      :
{}
{
  LocalVariableDeclaration() ";"
|
  Statement()
}

void LocalVariableDeclaration()      :
{}
{
  <VAR> VariableDeclarator() ( "," VariableDeclarator() )*
}

void VariableDeclarator()               :
{/*@bgen(jjtree) VarDeclarator */
  ASTVarDeclarator jjtn000 = new ASTVarDeclarator(JJTVARDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclarator */
  try {
/*@egen*/
  item_var() [ "=" Expression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
 * Statement syntax follows.
 */

void Statement()      :
{}
{
  Block()
|
  EmptyStatement()
|
  Expression() ";"
|
  IfStatement()

}

void EmptyStatement()      :
{}
{
  ";"
}

void IfStatement()        :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) CodeIf */
  ASTCodeIf jjtn000 = new ASTCodeIf(JJTCODEIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CodeIf */
  try {
/*@egen*/
  <IF> "(" Expression() ")" Statement() [ LOOKAHEAD(1) <ELSE> Statement() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*\u4e0d\u8003\u8651\u4efb\u4f55\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f*/
ASTExp Expression()     :
{/*@bgen(jjtree) Exp */
  ASTExp jjtn000 = new ASTExp(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp */
        try {
/*@egen*/
	SubExp() (LOOKAHEAD(2) item_oper() SubExp() )*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubExp()      :
{}
{
	SubExpLeft()
	|"(" Expression() ")"
}

void SubExpLeft()      :
{}
{
	LOOKAHEAD(2) item_const()
	|LOOKAHEAD(2) item_var()
	|LOOKAHEAD(2) ExpFunc()
	|LOOKAHEAD(2) ExpProp()
}

/*\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u4ed6\u53ea\u6709and or \u64cd\u4f5c,\u4e09\u5143\u64cd\u4f5c
ASTExpCond ExpCond() #ExpCond :
{}
{

	(
		LOOKAHEAD(2) item_const()
		|LOOKAHEAD(3) ExpFunc()
		|
		(
			LOOKAHEAD(item_var() ".")
			ExpDotList()
			|item_var()
		)
	)
	item_cond_oper() Expression()
    
	{ return jjtThis; }
}
*/




/*
	\u8c03\u7528\u65b9\u6cd5\u8868\u8fbe\u5f0f
*/
void ExpFunc()         :
{/*@bgen(jjtree) ExpFunc */
        ASTExpFunc jjtn000 = new ASTExpFunc(JJTEXPFUNC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ExpFunc */
                try {
/*@egen*/
		t=<IDENTIFIER> Arguments()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		
		{ jjtn000.setName(t.image);}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

/*
	\u5f62\u5982 xx.xx().dfsd.asdfsadf \u8868\u8fbe\u5f0f

void ExpDotList() #ExpDotList:
{
	Token t;
}
{
	item_var() "." (LOOKAHEAD(2) Expression()|ExpProp())
	
}*/

void ExpProp()         :
{/*@bgen(jjtree) ExpProp */
        ASTExpProp jjtn000 = new ASTExpProp(JJTEXPPROP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ExpProp */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Arguments()      :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
  try {
/*@egen*/
  Expression() ( "," Expression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void item_var()        :
{/*@bgen(jjtree) #Var( 0) */
        ASTVar jjtn000 = new ASTVar(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) #Var( 0) */
        try {
/*@egen*/
	"@" t=<IDENTIFIER>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000,  0);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.setName("@"+t.image);}
	| t=<USER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000,  0);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.setName(t.image);}
	| t=<ROLE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000,  0);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.setName(t.image);}
	| t=<ORG_UNIT>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000,  0);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  0);
          }
        }
/*@egen*/
}

void item_cond_oper()          :
{/*@bgen(jjtree) OperCond */
        ASTOperCond jjtn000 = new ASTOperCond(JJTOPERCOND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) OperCond */
        try {
/*@egen*/
	t=<AND>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<OR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void item_oper()      :
{/*@bgen(jjtree) Oper */
        ASTOper jjtn000 = new ASTOper(JJTOPER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Oper */
        try {
/*@egen*/
	t=<AND>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<OR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}
	
	| t=<ASSIGN>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<GT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<LT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}

	| t=<EQ>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<LE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<GE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<NE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<SC_OR>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<SC_AND>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<PLUS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<MINUS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<STAR>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<SLASH>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<BIT_AND>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<BIT_OR>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<REM>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setOperStr(t.image);}
	| t=<DOT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setOperStr(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void item_const()       :
{/*@bgen(jjtree) Const */
        ASTConst jjtn000 = new ASTConst(JJTCONST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Const */
        try {
/*@egen*/
	t=<TRUE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.BOOL,t.image);}
	|t=<FALSE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.BOOL,t.image);}
	|t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.INTEGER,t.image);}
	| t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.FLOAT,t.image);}
	| t = <CHARACTER_LITERAL>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.CHAR,t.image);}
	| t = <STRING_LITERAL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.STR,t.image);}
	| t = <NULL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setLiteralValue(ASTConst.LiteralType.NULL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}