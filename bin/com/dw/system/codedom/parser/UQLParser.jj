PARSER_BEGIN(UQLParser)

package com.dw.user.uql;

import java.io.StringReader;
import java.io.Reader;

public class UQLParser
{
	/**  
  	A String based constructor for ease of use.
  	**/
    public UQLParser(String s) 
    {
        this((Reader)(new StringReader(s))); 
    }
       
    public static void main(String args[])
    {
        try
        {
              String query = args[0];
              UQLParser parser = new UQLParser(query);
              parser.parse();
        }
        catch(Exception e)
        {
              e.printStackTrace();
        }
    }
}

PARSER_END(UQLParser)

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\\t"
    | "\\r"
    | "\\n"
}

TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <AND: "and">
   |  <OR:  "or">
   |  <USER: "user">
   |  <ROLE: "role">
   |  <ORG_UNIT: "orgunit">
   |  <LPAREN: "(">
   |  <RPAREN: ")">
   |  <EQUALS: "=">
   |  <NOTEQUAL: "!=">
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

void parse():
{}
{
	expression()
}

void expression() :
{}
{
	queryTerm() ( ( <AND> | <OR> ) queryTerm() )*
}

void queryTerm() :
{}
{
        (<USER> | <ROLE> | <ORG_UNIT> )
        ( <EQUALS> | <NOTEQUAL>)
        ( <INTEGER_LITERAL> |<FLOATING_POINT_LITERAL> |<CHARACTER_LITERAL> | <STRING_LITERAL> )
        |
       <LPAREN> expression() <RPAREN>
}
